(define (highest-factor-power-of n base)
  (define (_highest-factor-power-of n base acc)
    (if (= 0 (modulo n base))
      (_highest-factor-power-of (/ n base) base (+ acc 1))
      acc))
  (_highest-factor-power-of n base 0))

(define (cons x y)
  (* (expt 2 x)
     (expt 3 y)))
(define (car z) (highest-factor-power-of z 2))
(define (cdr z) (highest-factor-power-of z 3))

(let ((pair (cons 2 3)))
  (newline)
  (display "{")
  (display (car pair))
  (display ", ")
  (display (cdr pair))
  (display "}"))
